import os
import asyncio
import speech_recognition as sr
from pydub import AudioSegment
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.lsa import LsaSummarizer
from sumy.nlp.stemmers import Stemmer
from sumy.utils import get_stop_words

# –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8144555058:AAF7IOgPsXl4Quy_5D85DLwsNqfOuwylHlM"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –≥–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç
async def voice_to_text(voice_file_path: str) -> str:
    ogg_path = voice_file_path
    wav_path = ogg_path.replace(".ogg", ".wav")

    #.ogg -> .wav
    sound = AudioSegment.from_ogg(ogg_path)
    sound.export(wav_path, format="wav")

    # –†–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ —Ä–µ—á–∏
    recognizer = sr.Recognizer()
    with sr.AudioFile(wav_path) as source:
        audio = recognizer.record(source)
    try:
        text = recognizer.recognize_google(audio, language="ru-RU")
        return text
    except sr.UnknownValueError:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å."
    except sr.RequestError:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è."

# —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≥—Å
async def summarize_text(text: str) -> str:
    try:
        LANGUAGE = "russian"
        SENTENCES_COUNT = 3

        parser = PlaintextParser.from_string(text, Tokenizer(LANGUAGE))
        stemmer = Stemmer(LANGUAGE)
        summarizer = LsaSummarizer(stemmer)
        summarizer.stop_words = get_stop_words(LANGUAGE)

        summary_sentences = summarizer(parser.document, SENTENCES_COUNT)
        summary = " ".join(str(sentence) for sentence in summary_sentences)

        return summary if summary.strip() else "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–∂–∏–º–∫–∏: {e}"

# –∫–æ–º–∞–Ω–¥–∞ start 
@dp.message(CommandStart())
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä—É—é –∏ —Å–¥–µ–ª–∞—é –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ üôÇ")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞
@dp.message(lambda msg: msg.voice is not None)
async def handle_voice(message: types.Message):
    # –ï—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥ ‚Äî –Ω–µ –¥–µ–ª–∞–µ–º –≤—ã–∂–∏–º–∫—É
    short_voice = message.voice.duration < 30

    file_info = await bot.get_file(message.voice.file_id)
    file_path = file_info.file_path
    file_name = f"voice_{message.from_user.id}.ogg"

    await bot.download_file(file_path, file_name)
    await message.answer("‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å...")

    text = await voice_to_text(file_name)
    await message.answer(f"üó£ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{text}")

    # –î–µ–ª–∞–µ–º –≤—ã–∂–∏–º–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å >= 30 —Å–µ–∫—É–Ω–¥
    if not short_voice:
        summary = await summarize_text(text)
        await message.answer(f"üß† –ö—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞:\n\n{summary}")
    else:
        await message.answer("üéß –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—á–µ 30 —Å–µ–∫—É–Ω–¥ ‚Äî –≤—ã–∂–∏–º–∫—É –Ω–µ –¥–µ–ª–∞—é.")

    os.remove(file_name)
    wav_file = file_name.replace(".ogg", ".wav")
    if os.path.exists(wav_file):
        os.remove(wav_file)


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
